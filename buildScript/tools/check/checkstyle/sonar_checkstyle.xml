<!--  Generated by Sonar  -->
<module name="Checker">
    <!--  抑制警告  -->
    <module name="SuppressWarningsFilter"/>
    <!--　检查源码每行的长度 -->
    <module name="LineLength">
        <property name="severity" value="warning"/>
        <property name="max" value="80"/>
        <property name="ignorePattern" value="^ *\* *[^ ]+$"/>
        <property name="tabWidth" value="8"/>
    </module>
    <!-- 这是一项FileSetCheck检查，通过检查关键字的一致性属性文件，它可以确保代码的语言转换的正确性 -->
    <module name="Translation">
        <property name="severity" value="info"/>
        <property name="fileExtensions" value=".properties"/>
        <property name="baseName" value="^messages.*$"/>
    </module>
    <!--  检查源码中没有制表符（'\t'）  -->
    <module name="FileTabCharacter">
        <property name="severity" value="info"/>
        <property name="eachLine" value="false"/>
    </module>
    <!--  检查每个Java包是否都有Javadoc注释。默认情况下，它只允许使用一个package-info.java文件.  -->
    <module name="JavadocPackage">
        <property name="severity" value="info"/>
        <property name="fileExtensions" value=".java"/>
        <property name="allowLegacy" value="false"/>
    </module>

    <!--　检查源码文件的长度
            max: 定义一个文件所能容许的行数 -->
    <module name="FileLength">
        <property name="severity" value="warning"/>
        <property name="max" value="1000"/>
    </module>
    <module name="TreeWalker">
        <!--  让@SuppressWarnings注解可以用在Checkstyle：@SuppressWarnings({"membername"}) -->
        <module name="SuppressWarningsHolder"/>
        <!-- =============命名检查============= -->
        <!-- 检查抽象类的名称是否遵守命名规约
            format: 定义抽象类的命名规则 -->
        <module name="AbstractClassName">
            <property name="severity" value="warning"/>
            <property name="ignoreName" value="false"/>
            <property name="ignoreModifier" value="false"/>
            <property name="format" value="^Abstract.+$"/>
        </module>

        <!-- =============长度检查============= -->
        <!--　检查匿名内部类的长度
            max: 定义匿名内部类最多容许的行数 -->
        <module name="AnonInnerLength">
            <property name="severity" value="warning"/>
            <property name="max" value="20"/>
        </module>
        <!-- 检查初始化数祖时，最后一个元素后面是否加了逗号，如果左右大括号都在同一行，则可以不加逗号 -->
        <module name="ArrayTrailingComma">
            <property name="severity" value="warning"/>
            <property name="alwaysDemandTrailingComma" value="false"/>
        </module>
        <!-- =============杂项检查============= -->
        <!-- 检查数组定义的风格。有的开发者使用Java风格：public static void main(String[] args)；有的开发者使用C风格：public static void main(String args[]) -->
        <module name="ArrayTypeStyle">
            <property name="severity" value="info"/>
            <property name="javaStyle" value="true"/>
        </module>

        <!-- =============编码检查============= -->
        <!--　检查是否在同一行初始化， 例如：private int Age = nGe==1 ? 100 : 0; 就应该避免 -->
        <module name="AvoidInlineConditionals">
            <property name="severity" value="info"/>
        </module>
        <!-- =============代码块检查============= -->
        <!--　找到嵌套代码块，也就是在代码中无节制使用的代码块
            allowInSwitchCase: 定义是否允许switch case中使用嵌套的代码块 -->
        <module name="AvoidNestedBlocks">
            <property name="severity" value="warning"/>
            <property name="allowInSwitchCase" value="false"/>
        </module>

        <!-- 避免调用超类构造函数-->
        <module name="AvoidNoArgumentSuperConstructorCall">
            <property name="severity" value="info"/>
        </module>
        <!-- =============import检查=============-->
        <!--　检查没有import语句使用*符号
            excludes: 定义可以使用*导入的包 -->
        <module name="AvoidStarImport">
            <property name="severity" value="info"/>
            <property name="allowStaticMemberImports" value="false"/>
            <property name="allowClassImports" value="false"/>
            <property name="excludes" value="java.io,java.util"/>
        </module>
        <!-- 检查捕获参数（catch（Exception e））名称是否符合由format属性指定的格式。-->
        <module name="CatchParameterName">
            <property name="severity" value="warning"/>
            <property name="format" value="^(e|t|ex|[a-z][a-z][a-zA-Z]+)$"/>
        </module>
        <!-- 测量给定类中的其他类的实例化操作的次数 -->
        <module name="ClassDataAbstractionCoupling">
            <property name="severity" value="warning"/>
            <property name="excludedClasses" value="ArrayIndexOutOfBoundsException, ArrayList, Boolean, Byte,"/>
            <property name="max" value="7"/>
            <property name="excludeClassesRegexps" value="^$"/>
        </module>

        <!-- 检查类类型参数的标识符命名规则 -->
        <module name="ClassTypeParameterName">
            <property name="severity" value="warning"/>
            <property name="format" value="^[A-Z]$"/>
        </module>
        <!--　检查定义了共变equals()方法的类中是否同样覆盖了equals(java.lang.Object)方法 -->
        <module name="CovariantEquals">
            <property name="severity" value="error"/>
        </module>
        <!-- 检查循环复杂度是否超出了指定的限值。
       该复杂度由构造器、方法、静态初始化程序、
       实例初始化程序中的if、while、do、for、?:、catch、switch、case等语句，以及&&和||运算符的数量所测量 -->
        <module name="CyclomaticComplexity">
            <property name="severity" value="warning"/>
            <property name="switchBlockAsSingleDecisionPoint" value="false"/>
            <property name="max" value="10"/>
            <property name="tokens" value="LITERAL_WHILE,LITERAL_DO,LITERAL_FOR,LITERAL_IF,LITERAL_SWITCH,LITERAL_CASE,LITERAL_CATCH,QUESTION,LAND,LOR"/>
        </module>
        <!--　检查switch语句中的default是否在所有的case分支之后 -->
        <module name="DefaultComesLast">
            <property name="severity" value="warning"/>
            <property name="skipIfLastAndSharedWithCase" value="false"/>
        </module>
        <!-- =============类设计检查============= -->
        <!-- 检查类是否被设计为可扩展的，如果是，则方法应该abstract、final或者是空的 -->
        <module name="DesignForExtension">
            <property name="severity" value="info"/>
            <property name="ignoredAnnotations" value="After, AfterClass, Before, BeforeClass, Test"/>
        </module>

        <!-- 检查空的catch块 -->
        <module name="EmptyCatchBlock">
            <property name="severity" value="warning"/>
            <property name="exceptionVariableName" value="^$"/>
            <property name="commentFormat" value=".*"/>
        </module>
        <!-- 检查空的代码段 -->
        <module name="EmptyStatement">
            <property name="severity" value="info"/>
        </module>

        <!-- 检查字符串使用equals比较是否在左侧 -->
        <module name="EqualsAvoidNull">
            <property name="severity" value="warning"/>
            <property name="ignoreEqualsIgnoreCase" value="false"/>
        </module>
        <!--　检查覆盖了equals()方法的类是否也覆盖了hashCode()方法 -->
        <module name="EqualsHashCode">
            <property name="severity" value="error"/>
        </module>
        <!--　检查类或对象的成员是否显式地初始化为成员所属类型的默认值
       （对象引用的默认值为null，数值和字符类型的默认值为0，布尔类型的默认值为false） -->
        <module name="ExplicitInitialization">
            <property name="severity" value="warning"/>
            <property name="onlyObjectReferences" value="false"/>
        </module>
        <!--　检查switch语句中是否存在跨越分支。
       如果一个case分支的代码中缺少break、return、throw或continue语句，那么就会导致跨越分支 -->
        <module name="FallThrough">
            <property name="severity" value="warning"/>
            <property name="reliefPattern" value="falls?[ -]?thr(u|ough)"/>
            <property name="checkLastCaseGroup" value="false"/>
        </module>
        <!-- 检查一个只有私有构造器的类是否被声明为final -->
        <module name="FinalClass">
            <property name="severity" value="warning"/>
        </module>
        <!-- 确保工具类（在API中只有静态方法和字段的类）没有任何公有构造器 -->
        <module name="HideUtilityClassConstructor">
            <property name="severity" value="warning"/>
        </module>
        <!--　非法异常捕捉,不允许捕捉java.lang.Exception、java.lang.Error、java.lang.RuntimeException的行为 -->
        <module name="IllegalCatch">
            <property name="severity" value="warning"/>
            <property name="illegalClassNames" value="Error, Exception, RuntimeException, Throwable, java.lang.Error,"/>
        </module>
        <!--　检查是否导入了指定的非法包 -->
        <module name="IllegalImport">
            <property name="severity" value="warning"/>
            <property name="regexp" value="false"/>
            <property name="illegalPkgs" value="sun"/>
        </module>

        <!--　检查是否有不合法的实例化操作，是否使用工厂方法更好 -->
        <module name="IllegalInstantiation">
            <property name="severity" value="warning"/>
            <property name="tokens" value="CLASS_DEF"/>
        </module>

        <!--　非法异常抛出，这项检查可以用来确保类型不能声明抛出指定的异常类型。从不允许声明抛出 -->
        <module name="IllegalThrows">
            <property name="severity" value="warning"/>
            <property name="ignoreOverriddenMethods" value="true"/>
            <property name="illegalClassNames" value="Error, RuntimeException, Throwable, java.lang.Error,"/>
            <property name="ignoredMethodNames" value="finalize"/>
        </module>

        <!-- 检查Java代码的缩进是否正确
           basicOffset: 定义代码体相对于所属的代码体的缩进量
　　　　    braceAdjustment: 定义括号的缩进量
　　　　    caseIndent: 定义case的缩进量 -->
        <module name="Indentation">
            <property name="severity" value="info"/>
            <property name="throwsIndent" value="4"/>
            <property name="forceStrictCondition" value="false"/>
            <property name="arrayInitIndent" value="4"/>
            <property name="tabWidth" value="8"/>
            <property name="caseIndent" value="4"/>
            <property name="lineWrappingIndentation" value="4"/>
            <property name="braceAdjustment" value="0"/>
            <property name="basicOffset" value="4"/>
        </module>
        <!--　检查接口是否只定义了变量而没有定义方法，因为接口应该用来描述一个类型，所以只定义变量而不定义方法是不恰当的
           allowMarkerInterfaces: 是否检查空接口 -->
        <module name="InterfaceIsType">
            <property name="severity" value="warning"/>
            <property name="allowMarkerInterfaces" value="true"/>
        </module>
        <!--　用于圈复杂度检查的，例如一个方法里有很多很多的for if else，则圈复杂度就会很多，也就是说这个方法的分支太多了，
        最大问题就是导致代码非常丑陋，有可能情况也会导致效率问题。 -->
        <module name="JavaNCSS">
            <property name="severity" value="warning"/>
            <property name="classMaximum" value="1500"/>
            <property name="fileMaximum" value="2000"/>
            <property name="methodMaximum" value="50"/>
        </module>
        <!-- 检查局部final变量的名称是否遵守命名规约
            format: 定义局部常量的命名规则 -->
        <module name="LocalFinalVariableName">
            <property name="severity" value="warning"/>
            <property name="format" value="^[A_Z][A-Z0-9]*(_[A_Z0-9]+)*$"/>
            <property name="tokens" value="VARIABLE_DEF,PARAMETER_DEF,RESOURCE"/>
        </module>
        <!--　检查方法名称是否遵守命名规约
            format: 定义方法名的命名规则 -->
        <module name="MethodName">
            <property name="severity" value="warning"/>
            <property name="allowClassName" value="false"/>
            <property name="applyToPackage" value="true"/>
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPrivate" value="true"/>
        </module>
        <!--　检查方法的类型参数名称是否遵守命名规约-->
        <module name="MethodTypeParameterName">
            <property name="severity" value="warning"/>
            <property name="format" value="^[A-Z]$"/>
        </module>
        <!--　检查switch语句是否含有default子句 -->
        <module name="MissingSwitchDefault">
            <property name="severity" value="warning"/>
        </module>
        <!--　检查循环控制变量是否被修改 -->
        <module name="ModifiedControlVariable">
            <property name="severity" value="warning"/>
            <property name="skipEnhancedForLoopVariable" value="false"/>
        </module>
        <!-- =============修饰符检查============= -->
        <!--　检查代码中的标识符的顺序是否符合《Java Language Specification》中的第8.1.1、8.3.1章节所建议的顺序
            正确的顺序应当如下：
　　　　    1. public
　　　　    2. protected
　　　　    3. private
　　　　    4. abstract
　　　　    5. static
　　　　    6. final
　　　　    7. transient
　　　　    8. volatile
　　　　    9. synchronized
　　　　    10. native
　　　　    11. strictfp -->
        <module name="ModifierOrder">
            <property name="severity" value="info"/>
        </module>
        <!--　检查一次声明多个变量时，变量是否在同一行或者在同一个语句中 -->
        <module name="MultipleVariableDeclarations">
            <property name="severity" value="warning"/>
        </module>
        <!--　NPATH度量会计算遍历一个函数时，所有可能的执行路径的数量。它会考虑嵌套的条件语句，以及由多部分组成的布尔表达式（例如，A && B，C || D，等等） -->
        <module name="NPathComplexity">
            <property name="severity" value="warning"/>
            <property name="max" value="200"/>
        </module>
        <!--　限制for循环的嵌套层数（默认值为1） -->
        <module name="NestedForDepth">
            <property name="severity" value="warning"/>
            <property name="max" value="1"/>
        </module>
        <!--　限制if-else代码块的嵌套层数（默认值为1） -->
        <module name="NestedIfDepth">
            <property name="severity" value="warning"/>
            <property name="max" value="1"/>
        </module>
        <!--　限制try代码块的嵌套层数（默认值为1）-->
        <module name="NestedTryDepth">
            <property name="severity" value="warning"/>
            <property name="max" value="1"/>
        </module>

        <!--　检查每行是否只有一条语句。
        下面的一行将会被标识为出错：`x = 1; y = 2; // 一行中有两条语句`-->
        <module name="OneStatementPerLine">
            <property name="severity" value="warning"/>
            <property name="treatTryResourcesAsStatement" value="false"/>
        </module>

        <!--　检查重载方法被放在一起-->
        <module name="OverloadMethodsDeclarationOrder">
            <property name="severity" value="info"/>
        </module>
        <!--　检查包名称是否遵守命名规约
              format: 定义包名的命名规则 -->
        <module name="PackageName">
            <property name="severity" value="warning"/>
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
        </module>
        <!-- 不允许对参数进行赋值 -->
        <module name="ParameterAssignment">
            <property name="severity" value="warning"/>
        </module>
        <!--　检查参数名称是否遵守命名规约
           format: 定义参数名的命名规则 -->
        <module name="ParameterName">
            <property name="severity" value="warning"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="ignoreOverridden" value="false"/>
            <!-- sonar 6.7及其以下版本报错：Value ' protected' must be one of : public, protected, package, private. -->
            <!--<property name="accessModifiers" value="public, protected, package, private"/>-->
        </module>
        <!--　检查是否存在多余的导入语句 -->
        <module name="RedundantImport">
            <property name="severity" value="info"/>
        </module>
        <!-- 检查是否使用了this -->
        <module name="RequireThis">
            <property name="severity" value="warning"/>
            <property name="checkFields" value="true"/>
            <property name="validateOnlyOverlapping" value="true"/>
            <property name="checkMethods" value="true"/>
        </module>
        <!-- 限制return语句的数量。默认值为2。可以忽略检查指定的方法（默认忽略equals()方法 -->
        <module name="ReturnCount">
            <property name="severity" value="warning"/>
            <property name="maxForVoid" value="1"/>
            <property name="max" value="3"/>
            <property name="format" value="^equals$"/>
            <property name="tokens" value="CTOR_DEF,METHOD_DEF,LAMBDA"/>
        </module>
        <!-- 检查是否有过于复杂的布尔表达式。现在能够发现诸如if (b == true)、b || true、!false等类型的代码 -->
        <module name="SimplifyBooleanExpression">
            <property name="severity" value="warning"/>
        </module>
        <!-- 检查是否有过于复杂的布尔类型return语句 -->
        <module name="SimplifyBooleanReturn">
            <property name="severity" value="warning"/>
        </module>
        <!-- 检查在判断字符串是否相等时是否使用了正确的形式
             检查字符串对象的比较是否使用了==或!=运算符。
             解释：Java新手程序员经常会使用类似于下面的代码：
             if (x == "something")
             其实他们是想表达如下的意思：
             if ("something".equals(x)) -->
        <module name="StringLiteralEquality">
            <property name="severity" value="error"/>
        </module>
        <!-- 检查一个覆盖的clone()方法是否调用了super.clone()方法 -->
        <module name="SuperClone">
            <property name="severity" value="warning"/>
        </module>
        <!-- 检查一个覆盖的finalize()方法是否调用了super.finalize()方法 -->
        <module name="SuperFinalize">
            <property name="severity" value="warning"/>
        </module>
        <!--　将异常抛出语句的数量配置为一个指定的限值（默认值为1）-->
        <module name="ThrowsCount">
            <property name="severity" value="warning"/>
            <property name="ignorePrivateMethods" value="true"/>
            <property name="max" value="7"/>
        </module>
        <!-- 检查源码中是否有未注释的main()方法（调试的残留物）
            excludedClasses: 定义可以带main方法的类所匹配的名字形式 -->
        <module name="UncommentedMain">
            <property name="severity" value="warning"/>
            <property name="excludedClasses" value="^$"/>
        </module>
        <!-- 检查代码中是否使用了不必要的圆括号 -->
        <module name="UnnecessaryParentheses">
            <property name="severity" value="info"/>
            <property name="tokens" value="EXPR,IDENT,NUM_DOUBLE,NUM_FLOAT,NUM_INT,NUM_LONG,STRING_LITERAL,LITERAL_NULL,LITERAL_FALSE,LITERAL_TRUE,ASSIGN,BAND_ASSIGN,BOR_ASSIGN,BSR_ASSIGN,BXOR_ASSIGN,DIV_ASSIGN,MINUS_ASSIGN,MOD_ASSIGN,PLUS_ASSIGN,SL_ASSIGN,SR_ASSIGN,STAR_ASSIGN,LAMBDA"/>
        </module>
        <!--　检查未使用的导入语句 -->
        <module name="UnusedImports">
            <property name="severity" value="info"/>
            <property name="processJavadoc" value="true"/>
        </module>
        <!-- 检查long类型的常量在定义时是否由大写的“L”开头 -->
        <module name="UpperEll">
            <property name="severity" value="info"/>
        </module>
        <!--　检查类成员的可见性。
            只有static final的类成员可以是公有的，其他的类成员必须是私有的，除非设置了protectedAllowed属性或packageAllowed属性
            packageAllowed: 变量包内成员可以访问
            protectedAllowed: 变量是受保护的
            publicMemberPattern: 可以公开访问的变量所匹配的命名形式 -->
        <module name="VisibilityModifier">
            <property name="severity" value="warning"/>
            <property name="immutableClassCanonicalNames" value="java.io.File, java.lang.Boolean, java.lang.Byte"/>
            <property name="protectedAllowed" value="false"/>
            <property name="publicMemberPattern" value="^serialVersionUID$"/>
            <property name="allowPublicImmutableFields" value="false"/>
            <property name="packageAllowed" value="false"/>
            <property name="allowPublicFinalFields" value="false"/>
            <property name="ignoreAnnotationCanonicalNames" value="com.google.common.annotations.VisibleForTesting"/>
        </module>
        <!-- 抑制注释过滤器 -->
        <module name="SuppressionCommentFilter"/>
    </module>
</module>