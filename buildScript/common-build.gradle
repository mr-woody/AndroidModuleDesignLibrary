apply from: "${rootProject.rootDir}/buildScript/debug/debug-build.gradle"
ext {
    mainModuleType = "mainModule"
    aloneRunLibraryModuleType = "aloneRunLibraryModule"
    libraryModuleType = "libraryModule"

    configModuleGradleScript = { moduleType ->
        applyPlugin(moduleType)
        applyAndroidDefaultConfig()
        applyApplicationId(moduleType)
    }

    applyAndroidDefaultConfig = {
        project.android.compileSdkVersion androids.compileSdkVersion
        project.android.defaultConfig.targetSdkVersion androids.targetSdkVersion
        project.android.defaultConfig.minSdkVersion androids.minSdkVersion
        project.android.defaultConfig.buildConfigField("String", "API_RELEASE_HOST", "${API_RELEASE_HOST}")
        project.android.defaultConfig.buildConfigField("String", "API_PRE_RELEASE_HOST", "${API_PRE_RELEASE_HOST}")
        project.android.defaultConfig.buildConfigField("String", "API_TEST_HOST", "${API_TEST_HOST}")
        project.android.defaultConfig.buildConfigField("String", "API_DEV_HOST", "${API_DEV_HOST}")
    }

    applyPlugin = { moduleType ->
        if(moduleType == libraryModuleType) {
            project.apply plugin: 'com.android.library'
            project.description "library"
        } else {
            project.apply plugin: 'com.android.application'
            project.description "app"
        }
        project.apply plugin: 'kotlin-android'
        project.apply plugin: 'kotlin-android-extensions'
    }

    applyApplicationId = { moduleType ->
        if(moduleType == mainModuleType) {
            project.android.defaultConfig.applicationId applicationId
        } else if(moduleType == aloneRunLibraryModuleType) {
            project.android.defaultConfig.applicationId applicationId + "." + project.name
        }
    }

    isAloneRunLibraryModule = { projectName ->
        def aloneRunLibraryModuleList = aloneRunLibraryModules
        return project.hasProperty('aloneRunLibraryModules') && aloneRunLibraryModuleList.indexOf(projectName) != -1
    }
}