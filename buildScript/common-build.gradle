apply from: "${rootProject.rootDir}/buildScript/debug/debug-build.gradle"
ext {
    mainModuleType = "mainModule"
    aloneRunLibraryModuleType = "aloneRunLibraryModule"
    libraryModuleType = "libraryModule"

    configModuleGradleScript = { moduleType ->
        applyPlugin(moduleType)
        applyAndroidDefaultConfig(moduleType)
        applyApplicationId(moduleType)
    }

    applyAndroidDefaultConfig = { moduleType ->
        project.android.compileSdkVersion androids.compileSdkVersion
        project.android.defaultConfig.targetSdkVersion androids.targetSdkVersion
        project.android.defaultConfig.minSdkVersion androids.minSdkVersion
        if(moduleType == mainModuleType) {
            project.android.defaultConfig.multiDexEnabled androids.multiDexEnabled
        }
    }

    applyPlugin = { moduleType ->
        if(moduleType == libraryModuleType) {
            project.apply plugin: 'com.android.library'
            project.description "library"
        } else {
            project.apply plugin: 'com.android.application'
            project.description "app"
        }
        project.apply plugin: 'kotlin-android'
        project.apply plugin: 'kotlin-android-extensions'
    }

    applyApplicationId = { moduleType ->
        if(moduleType == mainModuleType) {
            project.android.defaultConfig.applicationId applicationId
        } else if(moduleType == aloneRunLibraryModuleType) {
            project.android.defaultConfig.applicationId applicationId + "." + project.name
        }

        configurations.all {
            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                def requested = details.requested
                if (requested.group == 'com.android.support') {
                    if (!requested.name.startsWith("multidex")) {
                        details.useVersion versions.supportLibraryVersion
                    }
                }
            }
        }
    }

    isAloneRunLibraryModule = { projectName ->
        def aloneRunLibraryModuleList = aloneRunLibraryModules
        return project.hasProperty('aloneRunLibraryModules') && !aloneRunLibraryModuleList.isEmpty() && aloneRunLibraryModuleList.indexOf(projectName) != -1
    }
}