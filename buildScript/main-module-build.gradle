import java.util.regex.Pattern

apply from: "${rootProject.rootDir}/buildScript/common-build.gradle"

configModuleGradleScript(mainModuleType)

//对组件库的依赖格式： addComponent dependencyName [, realDependency]
// 使用示例见demo/build.gradle
//  dependencyName: 组件库的名称，推荐直接使用使用module的名称
//  realDependency(可选): 组件库对应的实际依赖，可以是module依赖，也可以是maven依赖
//    如果未配置realDependency，将自动依赖 project(":$dependencyName")
//    realDependency可以为如下2种中的一种:
//      module依赖 : project(':demo_component_b') //如果module名称跟dependencyName相同，可省略(推荐)
//      maven依赖  : 'com.okay.demo:demoB:1.1.0' //如果使用了maven私服，请使用此方式
ext.addComponent = { dependencyName, realDependency = null ->
    def curModuleIsBuildingApk = false //当前task是否为给本module打apk包
    def taskNames = project.gradle.startParameter.taskNames
    def regex = "((.*:)?${project.name.toUpperCase()}:)?((ASSEMBLE)|(INSTALL)|((BUILD)?TINKER)|(RESGUARD)).*"
    def taskBuildApkPattern = Pattern.compile(regex)
    for (String task : taskNames) {
        log("task $task,$dependencyName to ${project.name} ======>")
        if (taskBuildApkPattern.matcher(task.toUpperCase()).matches()) {
            curModuleIsBuildingApk = true
            break
        }
    }
    //不是在为本app module打apk包，不添加对组件的依赖
    if (!curModuleIsBuildingApk)
        return
    def componentProject = rootProject.subprojects.find { it.name == dependencyName }
    //dependencyName指定的module是否为配置为以application方式编译
    def runAsApp = false
    //当前模块能单独运行的时候，标记runAsApp为true
    if (componentProject && isAloneRunLibraryModule(getModuleName(componentProject))){
        runAsApp = true
    }
    if (!runAsApp) {
        def dependencyMode = (project.gradle.gradleVersion as float) >= 4.1F ? 'api' : 'compile'
        if (realDependency) {
            //通过参数传递的依赖方式，如：
            // project(':moduleName')
            // 或
            // 'com.okay.demo:demoA:1.1.0'
            project.dependencies.add(dependencyMode, realDependency)
            log("add $realDependency to ${project.name}'s dependencies")
        } else if (componentProject) {
            //第二个参数未传，默认为按照module来进行依赖
            project.dependencies.add(dependencyMode, project(":$dependencyName"))
            log("add project(\":$dependencyName\") to ${project.name}'s dependencies")

        } else {
            throw new RuntimeException(
                    "add dependency by [ addComponent '$dependencyName' ] occurred an error:" +
                            "\n'$dependencyName' is not a module in current project" +
                            " and the 2nd param is not specified for realDependency" +
                            "\nPlease make sure the module name is '$dependencyName'" +
                            "\nelse" +
                            "\nyou can specify the real dependency via add the 2nd param, for example: " +
                            "addComponent '$dependencyName', 'com.okay.demo:demoB:1.1.0'")
        }
    }
}


//获得当前的module名字
private String getModuleName(Project project) {
    String projectName = (project.parent == null ? project.name : project.path.replaceFirst(":",""))
    return projectName
}


